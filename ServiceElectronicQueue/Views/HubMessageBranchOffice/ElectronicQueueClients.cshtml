@using Microsoft.AspNetCore.Mvc.TagHelpers
@model List<ServiceElectronicQueue.Models.KafkaQueue.KafkaMessageClientToBranchOffice>
@{
    ViewData["Title"] = "Обслуживание клиентов";
}

<h2>Обслуживание клиентов</h2>
<div style="text-align: right">
    <form asp-controller="HubMessageBranchOffice" asp-action="ExitToBranchOfficeAccount" method="get">
        <button type="submit" class="btn btn-primary">Выход в аккаунт филиала</button>
    </form><br/>
</div>
<div id="services-table">
    <table class="table">
        <thead>
        <tr>
            <th>Номер очереди</th>
            <th>Номер сервиса</th>
            <th>Сервис</th>
            <th>Действие</th>
        </tr>
        </thead>
        <tbody id="queues-tbody">
        @foreach (var kafkaMessageClientToBranchOffice in Model)
        {
            <tr>
                <td>@Html.DisplayFor(modelItem => kafkaMessageClientToBranchOffice.NumberQueue)</td>
                <td>@Html.DisplayFor(modelItem => kafkaMessageClientToBranchOffice.NumberService)</td>
                <td>@Html.DisplayFor(modelItem => kafkaMessageClientToBranchOffice.Service)</td>
                <td>
                    <a asp-controller="HubMessageBranchOffice" asp-action="ReadyMaintenance" asp-route-numberQueue="@kafkaMessageClientToBranchOffice.NumberQueue" class="btn btn-primary">Начать обслуживание</a>
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>

<script>
    function updateServicesTable() {
        fetch('/HubMessageBranchOffice/ElectronicQueueClientsForAjax/')
            .then(response => response.json())
            .then(queues => {
                var queueTbody = document.getElementById("queues-tbody");
                //queueTbody.innerHTML = ''; // Очистка таблицы

                queues.forEach(queue => {
                    // Создание строки таблицы
                    var row = document.createElement('tr');

                    // Добавление уникального номера в очереди
                    var numberQueueCell = document.createElement('td');
                    numberQueueCell.textContent = queue.NumberQueue;
                    // Добавление уникального номера сервиса
                    var numberServiceCell = document.createElement('td');
                    numberServiceCell.textContent = queue.NumberService;
                    // Добавление сервиса
                    var serviceCell = document.createElement('td');
                    serviceCell.textContent = queue.Service;
                    // Добавление кнопки
                    var actionsCell = document.createElement('td');
                    var startService = document.createElement('a');
                    startService.href = `/HubMessageBranchOffice/ReadyMaintenance?numberQueue=${queue.NumberQueue}`;
                    startService.textContent = 'Начать обслуживание';
                    startService.classList.add('btn', 'btn-primary');
                    actionsCell.appendChild(startService);

                    // Добавление ячеек в строку
                    row.appendChild(numberQueueCell);
                    row.appendChild(numberServiceCell);
                    row.appendChild(serviceCell);
                    row.appendChild(actionsCell);

                    // Добавление строку в таблицу
                    queueTbody.appendChild(row);
                });
            })
            .catch(error => console.error('Ошибка:', error));
    }

    // Вызов функции обновления списка каждые 5 секунд
    setInterval(updateServicesTable, 10000); 
</script>