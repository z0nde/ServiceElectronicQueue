// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ServiceElectronicQueue.Models.DataBaseCompany;

#nullable disable

namespace ServiceElectronicQueue.Migrations
{
    [DbContext(typeof(CompanyDbContext))]
    [Migration("20240505140202_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ServiceElectronicQueue.Models.DataBaseCompany.BranchOffice", b =>
                {
                    b.Property<Guid>("IdBranchOffice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Addres")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("IdOrganization")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrganizationIdOrganization")
                        .HasColumnType("uuid");

                    b.Property<string>("UniqueLink")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdBranchOffice");

                    b.HasIndex("OrganizationIdOrganization");

                    b.ToTable("BranchOffices");
                });

            modelBuilder.Entity("ServiceElectronicQueue.Models.DataBaseCompany.ElectronicQueue", b =>
                {
                    b.Property<Guid>("IdElectronicQueue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndService")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IdServices")
                        .HasColumnType("uuid");

                    b.Property<string>("NumberService")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ServicesIdServices")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartService")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("IdElectronicQueue");

                    b.HasIndex("ServicesIdServices");

                    b.ToTable("ElectronicQueues");
                });

            modelBuilder.Entity("ServiceElectronicQueue.Models.DataBaseCompany.Organization", b =>
                {
                    b.Property<Guid>("IdOrganization")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("bytea");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UniqueKey")
                        .HasColumnType("text");

                    b.HasKey("IdOrganization");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("ServiceElectronicQueue.Models.DataBaseCompany.Role", b =>
                {
                    b.Property<Guid>("IdRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Amplua")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdRole");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ServiceElectronicQueue.Models.DataBaseCompany.Services", b =>
                {
                    b.Property<Guid>("IdServices")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BranchOfficesIdBranchOffice")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdBranchOffice")
                        .HasColumnType("uuid");

                    b.Property<string>("Service")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdServices");

                    b.HasIndex("BranchOfficesIdBranchOffice");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("ServiceElectronicQueue.Models.DataBaseCompany.User", b =>
                {
                    b.Property<Guid>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("IdOrganization")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdRole")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OrganizationIdOrganization")
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RoleIdRole")
                        .HasColumnType("uuid");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdUser");

                    b.HasIndex("OrganizationIdOrganization");

                    b.HasIndex("RoleIdRole");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ServiceElectronicQueue.Models.DataBaseCompany.BranchOffice", b =>
                {
                    b.HasOne("ServiceElectronicQueue.Models.DataBaseCompany.Organization", "Organization")
                        .WithMany("Branches")
                        .HasForeignKey("OrganizationIdOrganization")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("ServiceElectronicQueue.Models.DataBaseCompany.ElectronicQueue", b =>
                {
                    b.HasOne("ServiceElectronicQueue.Models.DataBaseCompany.Services", "Services")
                        .WithMany("ElectronicQueues")
                        .HasForeignKey("ServicesIdServices")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Services");
                });

            modelBuilder.Entity("ServiceElectronicQueue.Models.DataBaseCompany.Services", b =>
                {
                    b.HasOne("ServiceElectronicQueue.Models.DataBaseCompany.BranchOffice", "BranchOffices")
                        .WithMany("Services")
                        .HasForeignKey("BranchOfficesIdBranchOffice")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BranchOffices");
                });

            modelBuilder.Entity("ServiceElectronicQueue.Models.DataBaseCompany.User", b =>
                {
                    b.HasOne("ServiceElectronicQueue.Models.DataBaseCompany.Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationIdOrganization")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiceElectronicQueue.Models.DataBaseCompany.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleIdRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ServiceElectronicQueue.Models.DataBaseCompany.BranchOffice", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("ServiceElectronicQueue.Models.DataBaseCompany.Organization", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ServiceElectronicQueue.Models.DataBaseCompany.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ServiceElectronicQueue.Models.DataBaseCompany.Services", b =>
                {
                    b.Navigation("ElectronicQueues");
                });
#pragma warning restore 612, 618
        }
    }
}
